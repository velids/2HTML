import magic 								#mimeType library
import subprocess
import os, os.path
import datetime	
import logging
import zipfile, tarfile
import tempfile, shutil
import sys
#import patoolib #needed to unrar

#initializes time by ISO (used for logging):
date = datetime.date.today() 

#prompts user for input & destination dir:
if len(sys.argv)<3:
	print "Missing arguments. Use: \n python " +sys.argv[0] + " --input dir or file" + " --destination dir"
	exit()

#User input sanitization, checks if single file or dir
if os.path.isdir(sys.argv[1]) is True:
	originaldir = sys.argv[1]						
elif os.path.isfile(sys.argv[1]) is True:					
	tempdirfile = tempfile.mkdtemp()		#If file, copy to tempdir, then pass on tempdir path as original dir attribute 
	shutil.copy2(os.path.normpath(sys.argv[1]), tempdirfile) #remember to test this.
	originaldir = tempdirfile
else:		
	print "Unknown input dir/file, please enter full path to file or dir!"
	exit()		

#This is output sanitization
if os.path.isdir(sys.argv[2]) is True:
	outputdir  = os.path.normpath(sys.argv[2])
elif os.path.isfile(sys.argv[2]) is True:
	print "Can't pick an existing file for output"
	exit()
else:
	print "Directory: " +sys.argv[2]+ " was not found, creating new directory..."
	outputdir = os.path.normpath(sys.argv[2]) +"_"+str(date)


mylog = "/home/velid/"+"error_MHC.log" #Should I put this in argv as well=?
logging.basicConfig(filename=mylog, level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s %(message)s') #appropriate format?
elogger=logging.getLogger(__name__)


def File(path): 							
	fileSet = set()
	relDir = os.path.relpath(root, originaldir)
	relFile = os.path.join(relDir, file)
	fileSet.add(relFile)
	return os.path.normpath(os.path.join(path, relFile))

def Folder(path, relativepath): 					
	relDir = os.path.relpath(root, relativepath)
	return os.path.normpath(os.path.join(path, relDir))


def WalkLevel (some_dir, level=2): 					#level determines how deep to crawl
	some_dir = some_dir.rstrip(os.path.sep) 
	assert os.path.isdir(some_dir) 
	num_sep = some_dir.count(os.path.sep)
	for root, dirs, files in os.walk (some_dir):
		yield root, dirs, files
		num_sep_this = root.count(os.path.sep)
		if num_sep + level <= num_sep_this:
			del dirs[:]

def MagString(path):
	return magic.from_file(path, mime=True)

def MimePdf():								#mimeType keyword for PDF
	return "application/pdf"

def Gzip(File, Destination):	#extracts .tar.gz files
	fh = tarfile.open (File, "r:gz")
	fh.extractall(Destination) 				
	fh.close()

def Xtar(File, Destination):  	#extracts .tar files
	tar = tarfile.open(File, "r:")
	fh.extractall(Destination)
	fh.close()

def Zip(File, Destination):	#extracts .zip files
	fh = open(File, "rb")
	z = zipfile.ZipFile(fh)
	z.extractall(Destination)
	fh.close()

"""
def Rar(File, Destination, X, Y):
	patoolib.extract_archive(File, os.path.join(Destination, os.path.relpath(X, Y), file+"_")) #still need to test it
"""

def oldExtension():
	return str(os.path.splitext(file)[1][1:])

def storepath(old, f):
	return str(old)+str(f)+"_/"

def Doc2Pdf(Output, Target): 							
	return subprocess.call(['libreoffice', '--headless', '--convert-to',oldExtension()+'.pdf:writer_pdf_Export', '--outdir', Output, Target ])

def Pdf2Html(Output, Target, Name): 				
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir", Output, Target, Name+".html"] )

#Stores MimeType IDs
myDocs = {
'application/vnd.oasis.opendocument.text' : Doc2Pdf,  						#.odt
'application/vnd.oasis.opendocument.presentation' : Doc2Pdf,					#.odp
'application/vnd.oasis.opendocument.spreadsheet' : Doc2Pdf,					#.ods 	-Libre, include templates also?
'application/vnd.ms-excel' : Doc2Pdf, 								#.xls					
'application/msword' :  Doc2Pdf, 								#.doc
'application/vnd.ms-powerpoint' : Doc2Pdf, 							#.ppt  	-ms.office
'application/vnd.openxmlformats-officedocument.wordprocessingml.document' : Doc2Pdf, 		#.docx 
'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : Doc2Pdf, 			#.xlsx
'application/vnd.openxmlformats-officedocument.presentationml.presentation' : Doc2Pdf,		#.pptx	-old ms.office mime types
}

myCompressed = {'application/gzip' : Gzip, 'application/x-tar' : Xtar, 'application/zip' : Zip} #still missing rar

#case 1. PDF -> HTML
for root, dirs, files in WalkLevel(originaldir): 			
	for file in files:
		if MimePdf() in MagString(File(originaldir)):
			try:
				Pdf2Html(Folder(outputdir, originaldir), File(originaldir), file)
			except Exception, e:
				elogger.error(e)
				continue


#Case 2. DOC->PDF->HTML
for root, dirs, files in WalkLevel(originaldir):
	for file in files:
		for line in myDocs:   					
			if line in MagString(File(originaldir)):
				try:
					tempdir = tempfile.mkdtemp() 						
					functionToCall = myDocs[line] 		
					functionToCall(Folder(tempdir, originaldir), File(originaldir))				
					Pdf2Html(Folder(outputdir, originaldir), str(os.path.splitext(File(tempdir))[0]+"."+oldExtension()+ ".pdf"), file)			
					shutil.rmtree(tempdir)				
				except Exception, e:
					elogger.error(e)
					shutil.rmtree(tempdir)
					continue

#Iterator function is (recursively) used when there are nested zip files
def Iterator(pathsum,ofile):
	i=0
	for root, dirs, files in os.walk(pathsum[0]):
		for file in files:
			if MimePdf() in MagString(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file))):
				Pdf2Html(outputdir+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/",os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), file)
			for line in myDocs: 
  				if line in MagString(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file))):
					tempdird = tempfile.mkdtemp()
					outp= outputdir+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/"
					outd= tempdird+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/"
					subprocess.call(['libreoffice', '--headless', '--convert-to',str(os.path.splitext(file)[1][1:])+'.pdf:writer_pdf_Export', '--outdir',outd, os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file))])
					subprocess.call ( ["pdf2htmlEX", "--dest-dir",outp, os.path.normpath(outd+file+".pdf"), file+".html"])
					shutil.rmtree(tempdird)
			for line in myCompressed:
				if line in MagString(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file))):
					pathsum.append(str(pathsum[0])+os.path.relpath(root, pathsum[0]) + "/"+str(file)) 
					i=i+1
					tempdiri = tempfile.mkdtemp()
					functionToCall = myCompressed[line]
					functionToCall(pathsum[i], str(tempdiri) + str(ofile)+str(file)+"_/")
					tfile = str(storepath(ofile, file))
					paths = []
					paths.append(str(tempdiri) + str(tfile))
					Iterator (paths, tfile)
					while len(paths) > 0 : paths.pop()
					shutil.rmtree(tempdiri)
	

#Case 3. ZIP->DOC/PDF->HTML
for subdir, dirs, files in WalkLevel(originaldir):
	for file in files:
		for line in myCompressed:
			try:
				if line in MagString(os.path.normpath(os.path.join(originaldir, os.path.relpath(subdir, originaldir), file))):			
					tempdir = tempfile.mkdtemp() 					
					functionToCall = myCompressed[line]
					functionToCall(os.path.normpath(os.path.join(originaldir, os.path.relpath(subdir, originaldir), file)), os.path.join(tempdir, os.path.relpath(subdir, originaldir), file+"_"))							
					for root, dirs, files in os.walk(tempdir):
						for file in files:
							if MimePdf() in MagString(os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file))):
								Pdf2Html(Folder(outputdir, tempdir), os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file)), str(os.path.splitext(file)[0]+ "."+oldExtension()))
							for line in myDocs: 
  								if line in MagString(os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file))):
									tempdird = tempfile.mkdtemp()		
									functionToCall = myDocs[line] 		
									functionToCall(Folder(tempdird, tempdir), os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file)))  		
									Pdf2Html(Folder(outputdir, tempdir), os.path.normpath(os.path.join(tempdird, os.path.relpath(root, tempdir), file+".pdf")), file)
									shutil.rmtree(tempdird)		
							for line in myCompressed:			
								if line in MagString(os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file))):
									tempdiri = tempfile.mkdtemp()	
									functionToCall = myCompressed[line]	
									functionToCall(os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file)),os.path.join(tempdiri,os.path.relpath(root, tempdir), str(file+"_/")))		
									icounter = 0				
									pathsum=[]			
									pathsum.append(os.path.join(tempdiri, os.path.relpath(root, tempdir), str(file+"_/")))
									Iterator(pathsum, "/"+os.path.relpath(root, tempdir) + "/"+str(file)+"_/")
									shutil.rmtree(tempdiri)
					shutil.rmtree(tempdir)
			except Exception, e:
				elogger.error(e)
				shutil.rmtree(tempdir)
				continue

if os.path.isdir(sys.argv[1]) is False:	
	shutil.rmtree(tempdirfile)	
