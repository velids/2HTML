import magic 								#mimeType library
import subprocess
import os, os.path
import datetime	
import logging
import zipfile, tarfile
import tempfile, shutil
import sys
#import patoolib #needed to unrar

#initializes time by ISO (used for logging):
date = datetime.date.today() 

#prompts user for input & destination dir:
if len(sys.argv)<3:
	print "Missing arguments. Use: \npython " +sys.argv[0] + " --input dir or file" + " --destination dir"
	exit()

#User input sanitization, checks if single file or dir
if os.path.isdir(sys.argv[1]) is True:
	originaldir = sys.argv[1]						
elif os.path.isfile(sys.argv[1]) is True:					
	tempdirfile = tempfile.mkdtemp()		#If file, copy to tempdir, then pass on tempdir path as original dir attribute 
	shutil.copy2(os.path.normpath(sys.argv[1]), tempdirfile) #remember to test this.
	originaldir = tempdirfile
else:		
	print "Unknown input dir/file, please enter full path to file or dir!"
	exit()		

#This is output sanitization
if os.path.isdir(sys.argv[2]) is True:
	outputdir  = os.path.normpath(sys.argv[2])
elif os.path.isfile(sys.argv[2]) is True:
	print "Can't pick an existing file for output"
	exit()
else:
	print "Directory: " +sys.argv[2]+ " was not found, creating new directory..."
	outputdir = os.path.normpath(sys.argv[2]) +"_"+str(date)


mylog = "/home/velid/"+"error_MHC.log" #Should I put this in argv as well=?
logging.basicConfig(filename=mylog, level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s %(message)s') #appropriate format?
elogger=logging.getLogger(__name__)


def File(path): 							
	fileSet = set()
	relDir = os.path.relpath(root, originaldir)
	relFile = os.path.join(relDir, file)
	fileSet.add(relFile)
	return os.path.normpath(os.path.join(path, relFile))

def Folder(path, relativepath): 					
	relDir = os.path.relpath(root, relativepath)
	return os.path.normpath(os.path.join(path, relDir))


def WalkLevel (some_dir, level=2): 					#level determines how deep to crawl
	some_dir = some_dir.rstrip(os.path.sep) 
	assert os.path.isdir(some_dir) 
	num_sep = some_dir.count(os.path.sep)
	for root, dirs, files in os.walk (some_dir):
		yield root, dirs, files
		num_sep_this = root.count(os.path.sep)
		if num_sep + level <= num_sep_this:
			del dirs[:]

def MagString(path):							#CASE 1/2 determines mimeType 
	return magic.from_file(File(path), mime=True)

def MagStringTemp(root, path):						#CASE 3: determine mimeType in temporary directory
	return magic.from_file(os.path.normpath(os.path.join(path, os.path.relpath(root, path), file)), mime=True)

def MagStringIterate(pathsum):
	return magic.from_file(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), mime= True)

def MimePdf():								#mimeType keyword for PDF
	return "application/pdf"

#Functions to uncompress with, appends "_" at end of each folder.
def Gzip(r, Tempdir, File):	 		#extracts .tar.gz files
	fh = tarfile.open(File, "r:gz")
	fh.extractall(os.path.join(Tempdir, os.path.relpath(r, originaldir), file+"_")) 				
	fh.close()	

def Xtar(r, Tempdir, File):  			#extracts .tar files
	tar = tarfile.open(File, "r:")
	fh.extractall(os.path.join(Tempdir, os.path.relpath(r, originaldir), file+"_"))
	fh.close()

def Zip(r, Tempdir, File):			#extracts .zip files
	fh = open(File, "rb")
	z = zipfile.ZipFile(fh)
	z.extractall(os.path.join(Tempdir, os.path.relpath(r, originaldir), file+"_"))
	fh.close()
	
"""
def Rar(x):
	patoolib.extract_archive(x, os.path.join(tempdir, os.path.relpath(subdir, originaldir), file+"_")) #still need to test it
"""
def oldExtension():
	return str(os.path.splitext(file)[1][1:])

def Pdf2HtmlIO(): 							#CASE 1: called in user input dir, output is user output dir
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir", Folder(outputdir, originaldir), File(originaldir), file+".html"] )

def Pdf2HtmlTO(): 							#CASE 2: called in temporary dir, output is user output dir
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir", Folder(outputdir, originaldir), str(os.path.splitext(File(tempdir))[0]+"."+oldExtension()+ ".pdf"), file + ".html"] )

def Doc2PdfIT(): 							#CASE 2: called in user input dir, output is temporary dir
	return subprocess.call(['libreoffice', '--headless', '--convert-to',oldExtension()+'.pdf:writer_pdf_Export', '--outdir', Folder(tempdir, originaldir), File(originaldir)])

def Doc2PdfTT(Tempdir):							#CASE 3: called in temporary dir n2, output is temporary dir
	return subprocess.call(['libreoffice', '--headless', '--convert-to', oldExtension()+'.pdf:writer_pdf_Export', '--outdir', Folder(tempdird, Tempdir), os.path.normpath(os.path.join(tempdir, os.path.relpath(root, Tempdir), file))])

def Pdf2HtmlCTO(): 							#CASE 3: called in temporary dir, output is user output dir
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir", Folder(outputdir, tempdir), os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file)), str(os.path.splitext(file)[0]+ "."+oldExtension()+".html")] )

def Pdf2HtmlCTOZ(Tempdir): 						#CASE 3: called in temporary dir n2, output is user output dir
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir", Folder(outputdir, Tempdir), os.path.normpath(os.path.join(tempdird, os.path.relpath(root, Tempdir), file+".pdf")), file+".html"] )

myDocs = {
'application/vnd.oasis.opendocument.text' : Doc2PdfIT,  					#.odt
'application/vnd.oasis.opendocument.presentation' : Doc2PdfIT,					#.odp
'application/vnd.oasis.opendocument.spreadsheet' : Doc2PdfIT,					#.ods 	-Libre, include templates also?
'application/vnd.ms-excel' : Doc2PdfIT, 							#.xls					
'application/msword' :  Doc2PdfIT, 								#.doc
'application/vnd.ms-powerpoint' : Doc2PdfIT, 							#.ppt  	-ms.office
'application/vnd.openxmlformats-officedocument.wordprocessingml.document' : Doc2PdfIT, 		#.docx 
'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : Doc2PdfIT, 		#.xlsx
'application/vnd.openxmlformats-officedocument.presentationml.presentation' : Doc2PdfIT,	#.pptx	-old ms.office mime types
}


myDict = {
'application/vnd.oasis.opendocument.text' : Doc2PdfTT,   					#.odt
'application/vnd.oasis.opendocument.presentation' : Doc2PdfTT, 					#.odp
'application/vnd.oasis.opendocument.spreadsheet' : Doc2PdfTT, 					#.ods 	-Libre, include templates also?
'application/vnd.ms-excel' : Doc2PdfTT,  							#.xls					
'application/msword' :  Doc2PdfTT,  								#.doc
'application/vnd.ms-powerpoint' : Doc2PdfTT,  							#.ppt  	-ms.office
'application/vnd.openxmlformats-officedocument.wordprocessingml.document' : Doc2PdfTT,  	#.docx 
'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : Doc2PdfTT,  		#.xlsx
'application/vnd.openxmlformats-officedocument.presentationml.presentation' : Doc2PdfTT, 	#.pptx	-old ms.office mime types
}

myCompressed = {'application/gzip' : Gzip, 'application/x-tar' : Xtar, 'application/zip' : Zip} #still missing rar

#case 1. PDF -> HTML
for root, dirs, files in WalkLevel(originaldir): 			
	for file in files:
		if MimePdf() in MagString(originaldir):
			try:
				Pdf2HtmlIO()
			except Exception, e:
				elogger.error(e)
				continue
	
#Case 2. DOC->PDF->HTML
for root, dirs, files in WalkLevel(originaldir):
	for file in files:
		for line in myDocs:   					
			if line in MagString(originaldir):
				try:
					tempdir = tempfile.mkdtemp() 			#initializes temporary Dir			
					functionToCall = myDocs[line] 		
					functionToCall()				#calls Doc2PdfIT
					Pdf2HtmlTO()			
					shutil.rmtree(tempdir)				#destructs temporary Dir
				except Exception, e:
					elogger.error(e)
					shutil.rmtree(tempdir)
					continue

###########################################################################
def OutputSubfolder(depthcounter, path): #returns correct output path for subfolders, remember to append for subfolders within ZIP!
	i = 0					
	out = str(outputdir)		
	while i <= depthcounter:			
 		out += str(path[i])
		i+=1
	return out

###########################################################################
def TempSubfolder(depthcounter, path): #returns correct output path for subfolders, remember to append for subfolders within ZIP!
	i = 0					
	out = str(tempdiri)		
	while i <= depthcounter:			
 		out += str(path[i])
		i+=1
	return out

def storepath(old, f):
	return str(old)+str(f)+"_/"

def Pdf2HtmlITO(): 							#CASE 3: called in temporary dir, output is user output dir
	return subprocess.call ( ["pdf2htmlEX", "--dest-dir",Folder(outputdir, outputdir), os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), str(os.path.splitext(file)[0]+".html")] )# "."+oldExtension()+


def Iterator(pathsum,ofile):
	i=0
	for root, dirs, files in os.walk(pathsum[0]):
		for file in files:


#nested pdf in nested zip
			if MimePdf() in magic.from_file(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), mime= True):
				outp= outputdir+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/"
				print file
				subprocess.call ( ["pdf2htmlEX", "--dest-dir",outp,os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), file+".html"] )
				

#nested doc in nested zip
			for line in myDict: 
  				if line in magic.from_file(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), mime= True):
					tempdird = tempfile.mkdtemp()
					outp= outputdir+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/"
					outd= tempdird+os.path.normpath(os.path.join(ofile, os.path.relpath(root, pathsum[0])))+"/"
					subprocess.call(['libreoffice', '--headless', '--convert-to',str(os.path.splitext(file)[1][1:])+'.pdf:writer_pdf_Export', '--outdir',outd, os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file))])
					
					subprocess.call ( ["pdf2htmlEX", "--dest-dir",outp, os.path.normpath(outd+file+".pdf"), file+".html"] )
					shutil.rmtree(tempdird)


#nested zip in nested zip
			for line in myCompressed:
				if line in magic.from_file(os.path.normpath(os.path.join(pathsum[0], os.path.relpath(root, pathsum[0]),file)), mime= True):
				#if line in MagStringIterate(pathsum):
					#print file
					pathsum.append(str(pathsum[0])+str(file)) #where file is located
					i=i+1	
					#print pathsum[i]
					#print str(ofile)+str(file)+"_/"
					tempdiri = tempfile.mkdtemp()
					#print os.path.join(tempdiri, str(ofile)+str(file)+"_/")
					#functionToCall = myCompressed[line]	#calls function to Uncompress
					#functionToCall(root, tempdiri, pathsum[i])
					fh = open(pathsum[i], "rb")   #this is just for testing purposes...
					z = zipfile.ZipFile(fh)
					z.extractall(str(tempdiri) + str(ofile)+str(file)+"_/") #extracts properly
					fh.close()
					#print str(tempdiri) + str(ofile)+str(file)+"_/" 
					#print storepath(ofile, file) + "Eureka"
					tfile = str(storepath(ofile, file))
					paths = []
					paths.append(str(tempdiri) + str(tfile))
					Iterator (paths, tfile)
					#print paths[0]
					while len(paths) > 0 : paths.pop()
					#Iterator (paths, tfile)
					shutil.rmtree(tempdiri)
	
############################################################################

#Case 3. ZIP->DOC/PDF->HTML
for subdir, dirs, files in WalkLevel(originaldir):
	for file in files:
		for line in myCompressed:
			if line in MagStringTemp(subdir, originaldir):			
				tempdir = tempfile.mkdtemp() 			#initializes temporary dir			
				functionToCall = myCompressed[line]
				functionToCall(subdir, tempdir, os.path.normpath(os.path.join(originaldir, os.path.relpath(subdir, originaldir), file)))										#output directory, input file
				#ofile = str(file) + "_/"
				for root, dirs, files in os.walk(tempdir):
					for file in files:
						if MimePdf() in MagStringTemp(root, tempdir):
							Pdf2HtmlCTO()
						for line in myDict: 
  							if line in MagStringTemp(root, tempdir):
								tempdird = tempfile.mkdtemp()	#2nd tempdir for doc>pdf	
								functionToCall = myDict[line] 		
								functionToCall(tempdir)  	#calls Doc2Pdf function		
								Pdf2HtmlCTOZ(tempdir)
								shutil.rmtree(tempdird)		#destructs 2nd temporary dir
						for line in myCompressed:			
							if line in MagStringTemp(root, tempdir):
								tempdiri = tempfile.mkdtemp()	
								functionToCall = myCompressed[line]	#calls function to Uncompress
								functionToCall(subdir, tempdiri, os.path.normpath(os.path.join(tempdir, os.path.relpath(root, tempdir), file)))		
								ofile = "/"+str(file)+"_/"
								icounter = 0		#depth counter
								pathsum=[]			
								pathsum.append(str(tempdiri)+str(ofile))
								"""for root, dirs, files in os.walk(tempdiri):
									for file in files:
										for line in myCompressed:
											if line in MagStringTemp(root, tempdiri):
												iteratecounter +=1
												pathsum.append(str(file)+"_/")
												print OutputSubfolder(iteratecounter, pathsum)
								"""
								Iterator(pathsum,ofile)
								shutil.rmtree(tempdiri)

				shutil.rmtree(tempdir)
if os.path.isdir(sys.argv[1]) is False:	#if user input pointed to a file, and not a folder - cleans up tempdir
	shutil.rmtree(tempdirfile)	


 
